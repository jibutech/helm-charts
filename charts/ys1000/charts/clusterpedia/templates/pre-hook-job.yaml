{{- if .Values.installCRDs }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-pre-manifests
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
  crds-configmaps.yaml: |-
      {{ range $path, $bytes := .Files.Glob (printf "_crds/*")}}
      {{- $.Files.Get $path | nindent 8 }}
      {{ end }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-apply-crds"
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: {{ .Release.Name }}
      labels:
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
    spec:
      serviceAccountName: {{ .Release.Name }}-pre-hook-job
      restartPolicy: Never
      containers:
      - name: install-crds
        image: {{ include "clusterpedia.hookJob.image" . }}
        imagePullPolicy: {{ .Values.hookJob.image.pullPolicy }}
        workingDir: /crds
        command:
        - /bin/sh
        - -c
        - |
          bash <<'EOF'
          set -ex
          kubectl apply --server-side -f /manifests/crds-configmaps.yaml --force-conflicts
          EOF
        volumeMounts:
        - name: manifests
          mountPath: /manifests
      volumes:
      - name: manifests
        configMap:
          name: {{ .Release.Name }}-pre-manifests
{{- end -}}
